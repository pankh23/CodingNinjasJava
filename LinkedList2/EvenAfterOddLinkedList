/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/


public class Solution {

	public static Node<Integer> evenAfterOdd(Node<Integer> head) {
		//Your code goes here
        if(head==null || head.next==null){
            return head;
        }
        Node<Integer> oddHead=null;
        Node<Integer> evenHead=null,evenTail=null;
        Node<Integer> oddTail=null;
        while(head!=null){
            if(head.data%2!=0){
                if (oddHead == null) {
                    oddHead = head;
                    oddTail = head;
                } else {
                    oddTail.next = head;
                    oddTail = oddTail.next;
                }
            }
        else {
                if (evenHead == null) {
                    evenHead = head;
                    evenTail = head;
                } else {
                    evenTail.next = head;
                    evenTail = evenTail.next;
                }
            }
            head = head.next;
        }
        
        if (oddHead == null) {
            return evenHead; // If there are no odd numbers, return the even list
        } else {
            oddTail.next = evenHead; // Connect the end of odd list to the beginning of even list
            if (evenHead != null) {
                evenTail.next = null; // Terminate the even list
            }
            return oddHead; // Return the head of the rearranged list
        }
	}
}